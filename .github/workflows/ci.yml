on: [ push, pull_request ]

env:
  CARGO_TERM_COLOR: always

jobs:
  check:
    name: Check

    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - run: cargo hack check --each-feature --clean-per-run

  check-examples:
    name: Check (examples)

    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - run: cargo hack check --each-feature --clean-per-run --examples

  clippy:
    name: Clippy

    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: clippy
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - run: cargo hack clippy --each-feature --clean-per-run -- -D warnings

  clippy-examples:
    name: Clippy (examples)

    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
          components: clippy
      - name: Install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      - run: cargo hack clippy --each-feature --clean-per-run --examples -- -D warnings

  examples:
    name: examples
    needs: [ check, check-examples, clippy, clippy-examples ]

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        example: [
          version,
          pair_pair,
          push_pull,
          publish_subscribe,
          publish_xsubscribe,
          xpublish_subscribe,
          xpublish_xsubscribe,
          request_reply,
          request_router,
          dealer_reply,
          dealer_router,
          dealer_dealer,
          stream_client,
          stream_server,
        ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - run: cargo run --release --verbose --example ${{ matrix.example }}

  examples-draft-api:
    name: examples (Draft API)
    needs: [ check, check-examples, clippy, clippy-examples ]

    strategy:
      matrix:
        example: [
          version,
          pair_pair,
          push_pull,
          publish_subscribe,
          publish_xsubscribe,
          xpublish_subscribe,
          xpublish_xsubscribe,
          request_reply,
          request_router,
          dealer_reply,
          dealer_router,
          dealer_dealer,
          stream_client,
          stream_server,
          channel_channel,
          scatter_gather,
        ]
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - run: cargo run --release --verbose --features examples-draft-api --example ${{ matrix.example }}

  examples-tokio:
    name: examples (tokio)
    needs: [ check, check-examples, clippy, clippy-examples ]

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        example: [
          publish_subscribe_async_tokio,
          request_reply_async_tokio,
          dealer_reply_async_tokio,
          request_router_async_tokio,
        ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - run: cargo run --features examples-tokio --release --verbose --example ${{ matrix.example }}

  examples-async-std:
    name: examples (async-std)
    needs: [ check, check-examples, clippy, clippy-examples ]

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        example: [
          publish_subscribe_async_async_std,
          request_reply_async_async_std,
          dealer_reply_async_async_std,
          request_router_async_async_std,
        ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - run: cargo run --features examples-async-std --release --verbose --example ${{ matrix.example }}

  examples-futures:
    name: examples (futures)
    needs: [ check, check-examples, clippy, clippy-examples ]

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        example: [
          publish_subscribe_async_futures,
          request_reply_async_futures,
          dealer_reply_async_futures,
          request_router_async_futures,
        ]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - run: cargo run --features examples-futures --release --verbose --example ${{ matrix.example }}

  build:
    name: build
    needs: [ check, clippy ]

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
      - name: Install toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: nightly
      - run: cargo build --release --verbose
      - name: Provide build artifacts
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ql_zmq_rcon_${{ matrix.os }}
          path: target/release/ql_zmq_rcon
      - name: Provide build artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ql_zmq_rcon_${{ matrix.os }}
          path: target/release/ql_zmq_rcon.exe
      - name: Provide build artifacts
        if: matrix.os != 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ql_zmq_stats_${{ matrix.os }}
          path: target/release/ql_zmq_stats
      - name: Provide build artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: ql_zmq_stats_${{ matrix.os }}
          path: target/release/ql_zmq_stats.exe
